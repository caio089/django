from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.contrib.auth import authenticate, login, logout
from django.db.models import Count, Sum, Q
from django.utils import timezone
from datetime import datetime, timedelta
from django.db import transaction
from payments.models import Pagamento, Assinatura, PlanoPremium
from django.contrib.auth.models import User
from django.contrib import messages
import json


def admin_login(request):
    """
    P√°gina de login exclusiva para o dashboard administrativo
    Credenciais: admin / limueiro
    """
    # Se j√° est√° logado como admin, redireciona para o dashboard
    if request.user.is_authenticated and request.user.is_superuser:
        return redirect('dashboard_admin')
    
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        
        # Autenticar usu√°rio
        user = authenticate(request, username=username, password=password)
        
        if user is not None:
            # Verificar se √© superusu√°rio
            if user.is_superuser:
                login(request, user)
                messages.success(request, f'Bem-vindo, {user.username}! üéâ')
                
                # Redirecionar para o dashboard ou para a p√°gina solicitada
                next_url = request.GET.get('next', 'dashboard_admin')
                return redirect(next_url)
            else:
                messages.error(request, '‚ùå Acesso negado! Apenas administradores podem acessar.')
        else:
            messages.error(request, '‚ùå Usu√°rio ou senha incorretos!')
    
    return render(request, 'dashboard/admin_login.html')


def admin_logout(request):
    """
    Logout do dashboard administrativo
    """
    logout(request)
    messages.success(request, '‚úÖ Logout realizado com sucesso!')
    return redirect('admin_login')


@login_required(login_url='/dashboard/login/')
def dashboard_admin(request):
    """
    Dashboard administrativo para visualizar assinaturas premium e receitas
    Requer login de superusu√°rio
    """
    
    # Verificar se o usu√°rio √© admin ou tem permiss√£o
    if not request.user.is_superuser:
        messages.error(request, 'Voc√™ n√£o tem permiss√£o para acessar o dashboard administrativo.')
        return render(request, 'dashboard/access_denied.html')
    
    # Data atual
    now = timezone.now()
    current_month = now.month
    current_year = now.year
    
    # === ESTAT√çSTICAS GERAIS ===
    
    # Total de assinaturas ativas
    active_subscriptions = Assinatura.objects.filter(
        status='ativa'
    ).count()
    
    # Total de usu√°rios premium √∫nicos
    unique_premium_users = Assinatura.objects.filter(
        status='ativa'
    ).values('usuario').distinct().count()
    
    # === RECEITAS ===
    
    # Receita total (todos os tempos)
    total_revenue = Pagamento.objects.filter(
        status='approved'
    ).aggregate(total=Sum('valor'))['total'] or 0
    
    # Receita do m√™s atual
    current_month_revenue = Pagamento.objects.filter(
        status='approved',
        data_criacao__year=current_year,
        data_criacao__month=current_month
    ).aggregate(total=Sum('valor'))['total'] or 0
    
    # Receita do m√™s passado
    last_month = now - timedelta(days=30)
    last_month_revenue = Pagamento.objects.filter(
        status='approved',
        data_criacao__gte=last_month.replace(day=1),
        data_criacao__lt=now.replace(day=1)
    ).aggregate(total=Sum('valor'))['total'] or 0
    
    # === CRESCIMENTO ===
    
    # Novos usu√°rios premium este m√™s
    new_premium_this_month = Assinatura.objects.filter(
        data_criacao__year=current_year,
        data_criacao__month=current_month
    ).count()
    
    # Novos usu√°rios premium m√™s passado
    new_premium_last_month = Assinatura.objects.filter(
        data_criacao__gte=last_month.replace(day=1),
        data_criacao__lt=now.replace(day=1)
    ).count()
    
    # Calcular crescimento percentual
    if new_premium_last_month > 0:
        growth_percentage = ((new_premium_this_month - new_premium_last_month) / new_premium_last_month) * 100
    else:
        growth_percentage = 100 if new_premium_this_month > 0 else 0
    
    # === HIST√ìRICO DOS √öLTIMOS 12 MESES ===
    
    monthly_data = []
    for i in range(12):
        month_date = now - timedelta(days=30*i)
        month_start = month_date.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        
        if i == 0:
            month_end = now
        else:
            next_month = month_start + timedelta(days=32)
            month_end = next_month.replace(day=1) - timedelta(days=1)
        
        month_revenue = Pagamento.objects.filter(
            status='approved',
            data_criacao__gte=month_start,
            data_criacao__lte=month_end
        ).aggregate(total=Sum('valor'))['total'] or 0
        
        month_subscriptions = Assinatura.objects.filter(
            data_criacao__gte=month_start,
            data_criacao__lte=month_end
        ).count()
        
        monthly_data.append({
            'month': month_start.strftime('%Y-%m'),
            'month_name': month_start.strftime('%b/%Y'),
            'revenue': float(month_revenue),
            'subscriptions': month_subscriptions
        })
    
    # Inverter para mostrar do mais antigo ao mais recente
    monthly_data.reverse()
    
    # === ASSINATURAS RECENTES ===
    
    recent_subscriptions = Assinatura.objects.filter(
        status='ativa'
    ).order_by('-data_criacao')[:10]
    
    # === STATUS DAS ASSINATURAS ===
    
    status_counts = Assinatura.objects.values('status').annotate(count=Count('id'))
    
    # === ESTAT√çSTICAS DE USU√ÅRIOS ===
    
    # Total de usu√°rios cadastrados
    total_users = User.objects.count()
    
    # Usu√°rios cadastrados este m√™s
    users_this_month = User.objects.filter(
        date_joined__year=current_year,
        date_joined__month=current_month
    ).count()
    
    # √öltimos usu√°rios cadastrados com informa√ß√£o de assinatura ativa
    recent_users = User.objects.order_by('-date_joined')[:20]
    
    # Adicionar informa√ß√£o de assinatura ativa para cada usu√°rio
    for user in recent_users:
        # Buscar TODAS as assinaturas do usu√°rio para debug
        all_subscriptions = Assinatura.objects.filter(usuario=user)
        active_subscriptions = Assinatura.objects.filter(
            usuario=user,
            status='ativa'
        )
        user.has_active_subscription = active_subscriptions.exists()
        
        print(f"DEBUG: Usu√°rio {user.username} - Total assinaturas: {all_subscriptions.count()}")
        for sub in all_subscriptions:
            print(f"  - Assinatura {sub.id}: status='{sub.status}', ativo={sub.ativo}")
        print(f"  - Assinaturas ativas: {active_subscriptions.count()}")
        print(f"  - has_active_subscription: {user.has_active_subscription}")
    
    # Planos dispon√≠veis para atribuir
    available_plans = PlanoPremium.objects.filter(ativo=True)
    
    # === CONTEXTO ===
    
    context = {
        'active_subscriptions': active_subscriptions,
        'unique_premium_users': unique_premium_users,
        'total_revenue': total_revenue,
        'current_month_revenue': current_month_revenue,
        'last_month_revenue': last_month_revenue,
        'new_premium_this_month': new_premium_this_month,
        'new_premium_last_month': new_premium_last_month,
        'growth_percentage': round(growth_percentage, 1),
        'monthly_data_json': json.dumps(monthly_data),
        'recent_subscriptions': recent_subscriptions,
        'status_counts': status_counts,
        'current_date': now.strftime('%d/%m/%Y'),
        'total_users': total_users,
        'users_this_month': users_this_month,
        'recent_users': recent_users,
        'available_plans': available_plans,
    }
    
    return render(request, 'dashboard/dashboard.html', context)


@login_required(login_url='/dashboard/login/')
def give_premium(request):
    """
    Fun√ß√£o para atribuir plano premium a um usu√°rio
    """
    if not request.user.is_superuser:
        messages.error(request, 'Voc√™ n√£o tem permiss√£o para esta a√ß√£o.')
        return redirect('dashboard_admin')
    
    if request.method == 'POST':
        user_id = request.POST.get('user_id')
        user_email = request.POST.get('user_email')
        plan_id = request.POST.get('plan_id')
        
        # Validar se pelo menos um m√©todo foi fornecido
        if not user_id and not user_email:
            messages.error(request, 'Voc√™ deve fornecer um email ou selecionar um usu√°rio da lista.')
            return redirect('dashboard_admin')
        
        if not plan_id:
            messages.error(request, 'Voc√™ deve selecionar um plano.')
            return redirect('dashboard_admin')
        
        try:
            # Buscar usu√°rio por ID ou email
            if user_id:
                user = User.objects.get(id=user_id)
            else:
                user = User.objects.get(email=user_email.strip())
            
            plan = PlanoPremium.objects.get(id=plan_id)
            
            # Verificar se j√° tem assinatura ativa
            existing = Assinatura.objects.filter(
                usuario=user,
                status='ativa'
            ).first()
            
            if existing:
                messages.warning(request, f'{user.username} j√° possui uma assinatura ativa!')
            else:
                # Criar nova assinatura
                now = timezone.now()
                data_vencimento = now + timedelta(days=plan.duracao_dias)
                
                assinatura = Assinatura.objects.create(
                    usuario=user,
                    plano=plan,
                    status='ativa',
                    data_inicio=now,
                    data_vencimento=data_vencimento,
                    ativo=True
                )
                
                messages.success(request, f'Plano {plan.nome} atribu√≠do com sucesso para {user.username}!')
        
        except User.DoesNotExist:
            if user_email:
                messages.error(request, f'Usu√°rio com email "{user_email}" n√£o encontrado.')
            else:
                messages.error(request, 'Usu√°rio n√£o encontrado.')
        except PlanoPremium.DoesNotExist:
            messages.error(request, 'Plano n√£o encontrado.')
        except Exception as e:
            messages.error(request, f'Erro ao atribuir plano: {str(e)}')
    
    return redirect('dashboard_admin')


@login_required(login_url='/dashboard/login/')
def remove_premium(request):
    """
    Fun√ß√£o para remover plano premium de um usu√°rio
    """
    if not request.user.is_superuser:
        messages.error(request, 'Voc√™ n√£o tem permiss√£o para esta a√ß√£o.')
        return redirect('dashboard_admin')
    
    if request.method == 'POST':
        user_id = request.POST.get('user_id')
        
        if not user_id:
            messages.error(request, 'ID do usu√°rio n√£o fornecido.')
            return redirect('dashboard_admin')
        
        try:
            with transaction.atomic():
                user = User.objects.get(id=user_id)
                
                # Buscar assinaturas ativas do usu√°rio
                assinaturas_ativas = Assinatura.objects.filter(
                    usuario=user,
                    status='ativa'
                )
                
                print(f"DEBUG: Usu√°rio {user.username} - Assinaturas ativas encontradas: {assinaturas_ativas.count()}")
                
                if not assinaturas_ativas.exists():
                    messages.warning(request, f'{user.username} n√£o possui assinatura ativa.')
                else:
                    # Cancelar todas as assinaturas ativas
                    count = 0
                    for assinatura in assinaturas_ativas:
                        print(f"DEBUG: Cancelando assinatura {assinatura.id} - Status atual: {assinatura.status}")
                        print(f"DEBUG: Antes - status: {assinatura.status}, ativo: {assinatura.ativo}")
                        
                        assinatura.status = 'cancelada'
                        assinatura.ativo = False
                        assinatura.data_cancelamento = timezone.now()
                        assinatura.save()
                        
                        print(f"DEBUG: Depois - status: {assinatura.status}, ativo: {assinatura.ativo}")
                        
                        # Verificar se realmente salvou
                        assinatura.refresh_from_db()
                        print(f"DEBUG: Ap√≥s refresh - status: {assinatura.status}, ativo: {assinatura.ativo}")
                        
                        count += 1
                        print(f"DEBUG: Assinatura {assinatura.id} cancelada com sucesso")
                    
                    messages.success(request, f'{count} assinatura(s) cancelada(s) para {user.username}!')
        
        except User.DoesNotExist:
            messages.error(request, f'Usu√°rio com ID {user_id} n√£o encontrado.')
        except Exception as e:
            messages.error(request, f'Erro ao remover premium: {str(e)}')
            print(f"DEBUG: Erro ao remover premium: {str(e)}")
    
    return redirect('dashboard_admin')


@login_required(login_url='/dashboard/login/')
def delete_user(request):
    """
    Fun√ß√£o para excluir um usu√°rio
    """
    if not request.user.is_superuser:
        messages.error(request, 'Voc√™ n√£o tem permiss√£o para esta a√ß√£o.')
        return redirect('dashboard_admin')
    
    if request.method == 'POST':
        user_id = request.POST.get('user_id')
        confirm = request.POST.get('confirm', '').lower()
        
        try:
            user = User.objects.get(id=user_id)
            
            # Prote√ß√£o: n√£o permitir excluir a si mesmo
            if user.id == request.user.id:
                messages.error(request, 'Voc√™ n√£o pode excluir sua pr√≥pria conta!')
                return redirect('dashboard_admin')
            
            # Prote√ß√£o: n√£o permitir excluir outros superusu√°rios
            if user.is_superuser:
                messages.error(request, 'Voc√™ n√£o pode excluir outros administradores!')
                return redirect('dashboard_admin')
            
            # Verificar confirma√ß√£o
            if confirm != 'excluir':
                messages.error(request, 'Confirma√ß√£o inv√°lida. Digite "excluir" para confirmar.')
                return redirect('dashboard_admin')
            
            username = user.username
            email = user.email
            
            # Excluir usu√°rio (isso tamb√©m exclui assinaturas e perfil por cascade)
            user.delete()
            
            messages.success(request, f'Usu√°rio {username} ({email}) exclu√≠do com sucesso!')
        
        except User.DoesNotExist:
            messages.error(request, 'Usu√°rio n√£o encontrado.')
        except Exception as e:
            messages.error(request, f'Erro ao excluir usu√°rio: {str(e)}')
    
    return redirect('dashboard_admin')