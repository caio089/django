"""
Comando para limpar usu√°rios e profiles duplicados
Execute: python manage.py limpar_duplicados
"""

from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from home.models import Profile

class Command(BaseCommand):
    help = 'Limpa usu√°rios e profiles duplicados ou √≥rf√£os'

    def handle(self, *args, **options):
        self.stdout.write("=" * 60)
        self.stdout.write("üßπ LIMPEZA DE USU√ÅRIOS DUPLICADOS/√ìRF√ÉOS")
        self.stdout.write("=" * 60)
        
        # 1. Encontrar profiles √≥rf√£os (sem usu√°rio)
        self.stdout.write("\n1Ô∏è‚É£  Verificando profiles √≥rf√£os...")
        orfaos = Profile.objects.filter(user__isnull=True)
        if orfaos.exists():
            self.stdout.write(f"   Encontrados {orfaos.count()} profiles √≥rf√£os")
            for profile in orfaos:
                self.stdout.write(f"   - Profile ID {profile.id} (sem usu√°rio)")
            # Deletar √≥rf√£os
            orfaos.delete()
            self.stdout.write("   ‚úÖ Profiles √≥rf√£os removidos")
        else:
            self.stdout.write("   ‚úÖ Nenhum profile √≥rf√£o encontrado")
        
        # 2. Encontrar usu√°rios sem profile
        self.stdout.write("\n2Ô∏è‚É£  Verificando usu√°rios sem profile...")
        usuarios_sem_profile = User.objects.filter(profile__isnull=True)
        if usuarios_sem_profile.exists():
            self.stdout.write(f"   Encontrados {usuarios_sem_profile.count()} usu√°rios sem profile")
            for user in usuarios_sem_profile:
                self.stdout.write(f"   - Usu√°rio ID {user.id} ({user.email})")
                # Criar profile padr√£o
                Profile.objects.create(
                    user=user,
                    nome=user.username,
                    idade=18,
                    faixa='branca'
                )
                self.stdout.write(f"     ‚úÖ Profile criado para {user.email}")
            self.stdout.write("   ‚úÖ Profiles criados para todos os usu√°rios")
        else:
            self.stdout.write("   ‚úÖ Todos os usu√°rios t√™m profile")
        
        # 3. Verificar duplicatas de email
        self.stdout.write("\n3Ô∏è‚É£  Verificando emails duplicados...")
        from django.db.models import Count
        emails_duplicados = User.objects.values('email').annotate(
            count=Count('email')
        ).filter(count__gt=1)
        
        if emails_duplicados.exists():
            self.stdout.write("   ‚ö†Ô∏è  Emails duplicados encontrados:")
            for item in emails_duplicados:
                email = item['email']
                count = item['count']
                self.stdout.write(f"   - {email}: {count} usu√°rios")
                # Manter apenas o mais antigo
                usuarios = User.objects.filter(email=email).order_by('date_joined')
                manter = usuarios.first()
                deletar = usuarios.exclude(id=manter.id)
                self.stdout.write(f"     ‚úÖ Mantendo: {manter.email} (ID {manter.id})")
                for user in deletar:
                    self.stdout.write(f"     üóëÔ∏è  Removendo: {user.email} (ID {user.id})")
                    user.delete()
        else:
            self.stdout.write("   ‚úÖ Nenhum email duplicado encontrado")
        
        # 4. Resumo final
        self.stdout.write("\n4Ô∏è‚É£  Resumo final:")
        total_usuarios = User.objects.count()
        total_profiles = Profile.objects.count()
        self.stdout.write(f"   üë• Usu√°rios: {total_usuarios}")
        self.stdout.write(f"   üìã Profiles: {total_profiles}")
        
        if total_usuarios == total_profiles:
            self.stdout.write("   ‚úÖ Sincroniza√ß√£o perfeita!")
        else:
            self.stdout.write("   ‚ö†Ô∏è  Ainda h√° diferen√ßa entre usu√°rios e profiles")
        
        self.stdout.write("\n" + "=" * 60)
        self.stdout.write("‚úÖ LIMPEZA CONCLU√çDA!")
        self.stdout.write("=" * 60)
