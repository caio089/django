"""
Comando para testar conex√£o e estado do banco de dados
Execute: python manage.py testar_banco
"""

from django.core.management.base import BaseCommand
from django.db import connection
from django.contrib.auth.models import User
from home.models import Profile, HistoricoFaixas
from quiz.models import CategoriaQuiz, Pergunta, Alternativa
from payments.models import PlanoPremium, ConfiguracaoPagamento

class Command(BaseCommand):
    help = 'Testa conex√£o e verifica estado do banco de dados'

    def handle(self, *args, **options):
        self.stdout.write("=" * 70)
        self.stdout.write("üîç TESTE COMPLETO DO BANCO DE DADOS")
        self.stdout.write("=" * 70)
        
        # 1. Testar conex√£o
        self.stdout.write("\n1Ô∏è‚É£  TESTANDO CONEX√ÉO...")
        try:
            with connection.cursor() as cursor:
                cursor.execute("SELECT version();")
                version = cursor.fetchone()[0]
                self.stdout.write(self.style.SUCCESS(f"   ‚úÖ Conex√£o OK!"))
                self.stdout.write(f"   üìä PostgreSQL: {version.split(',')[0]}")
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"   ‚ùå Erro de conex√£o: {e}"))
            return
        
        # 2. Verificar tabelas principais
        self.stdout.write("\n2Ô∏è‚É£  VERIFICANDO TABELAS...")
        
        tabelas_status = []
        
        try:
            count = User.objects.count()
            tabelas_status.append(("auth_user (Usu√°rios)", count, True))
        except Exception as e:
            tabelas_status.append(("auth_user (Usu√°rios)", 0, False))
        
        try:
            count = Profile.objects.count()
            tabelas_status.append(("home_profile (Perfis)", count, True))
        except Exception as e:
            tabelas_status.append(("home_profile (Perfis)", 0, False))
        
        try:
            count = CategoriaQuiz.objects.count()
            tabelas_status.append(("quiz_categoriaquiz (Categorias)", count, True))
        except Exception as e:
            tabelas_status.append(("quiz_categoriaquiz (Categorias)", 0, False))
        
        try:
            count = Pergunta.objects.count()
            tabelas_status.append(("quiz_pergunta (Perguntas)", count, True))
        except Exception as e:
            tabelas_status.append(("quiz_pergunta (Perguntas)", 0, False))
        
        try:
            count = Alternativa.objects.count()
            tabelas_status.append(("quiz_alternativa (Alternativas)", count, True))
        except Exception as e:
            tabelas_status.append(("quiz_alternativa (Alternativas)", 0, False))
        
        try:
            count = PlanoPremium.objects.count()
            tabelas_status.append(("payments_plano_premium (Planos)", count, True))
        except Exception as e:
            tabelas_status.append(("payments_plano_premium (Planos)", 0, False))
        
        for nome, count, ok in tabelas_status:
            if ok:
                self.stdout.write(f"   ‚úÖ {nome}: {count} registros")
            else:
                self.stdout.write(self.style.ERROR(f"   ‚ùå {nome}: ERRO"))
        
        # 3. Verificar integridade dos dados
        self.stdout.write("\n3Ô∏è‚É£  VERIFICANDO INTEGRIDADE...")
        
        # Usu√°rios sem profile
        try:
            usuarios_sem_profile = User.objects.filter(profile__isnull=True).count()
            if usuarios_sem_profile == 0:
                self.stdout.write("   ‚úÖ Todos os usu√°rios t√™m profile")
            else:
                self.stdout.write(self.style.WARNING(
                    f"   ‚ö†Ô∏è  {usuarios_sem_profile} usu√°rio(s) sem profile"
                ))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"   ‚ùå Erro ao verificar profiles: {e}"))
        
        # Perguntas sem alternativas
        try:
            perguntas_sem_alternativas = Pergunta.objects.filter(
                alternativas__isnull=True
            ).count()
            if perguntas_sem_alternativas == 0:
                self.stdout.write("   ‚úÖ Todas as perguntas t√™m alternativas")
            else:
                self.stdout.write(self.style.WARNING(
                    f"   ‚ö†Ô∏è  {perguntas_sem_alternativas} pergunta(s) sem alternativas"
                ))
        except Exception as e:
            self.stdout.write(self.style.WARNING(f"   ‚ö†Ô∏è  N√£o foi poss√≠vel verificar perguntas"))
        
        # 4. Resumo final
        self.stdout.write("\n4Ô∏è‚É£  RESUMO:")
        total_usuarios = User.objects.count()
        total_profiles = Profile.objects.count()
        total_quiz = CategoriaQuiz.objects.count()
        
        self.stdout.write(f"   üë• Usu√°rios cadastrados: {total_usuarios}")
        self.stdout.write(f"   üìã Profiles criados: {total_profiles}")
        self.stdout.write(f"   üìù Categorias de quiz: {total_quiz}")
        
        # Verificar configura√ß√£o de pagamento
        try:
            config = ConfiguracaoPagamento.objects.filter(ativo=True).first()
            if config:
                self.stdout.write(f"   üí≥ Mercado Pago: {'‚úÖ Configurado' if config.access_token and config.public_key else '‚ö†Ô∏è  Pendente'}")
            else:
                self.stdout.write("   üí≥ Mercado Pago: ‚ö†Ô∏è  N√£o configurado")
        except:
            self.stdout.write("   üí≥ Mercado Pago: ‚ö†Ô∏è  N√£o configurado")
        
        self.stdout.write("\n" + "=" * 70)
        
        # Verificar se tudo est√° OK
        tabelas_ok = all([status[2] for status in tabelas_status])
        
        if tabelas_ok and total_usuarios >= 0:
            self.stdout.write(self.style.SUCCESS("‚úÖ BANCO DE DADOS FUNCIONANDO PERFEITAMENTE!"))
        else:
            self.stdout.write(self.style.WARNING("‚ö†Ô∏è  BANCO DE DADOS COM PROBLEMAS - Verifique os erros acima"))
        
        self.stdout.write("=" * 70)

