#!/usr/bin/env python
"""
Script para migrar dados do SQLite para Supabase (PostgreSQL)

Este script:
1. Faz backup dos dados do SQLite
2. Verifica a conex√£o com o Supabase
3. Migra os dados para o PostgreSQL
4. Valida a migra√ß√£o

USO:
    python migrate_to_supabase.py
"""

import os
import sys
import subprocess
from datetime import datetime

def print_header(text):
    """Imprime cabe√ßalho formatado"""
    print("\n" + "=" * 60)
    print(f"  {text}")
    print("=" * 60 + "\n")

def print_step(number, text):
    """Imprime passo formatado"""
    print(f"\n[{number}] {text}")
    print("-" * 60)

def run_command(command, description):
    """Executa comando e retorna sucesso/falha"""
    print(f"\n>>> Executando: {description}")
    print(f"    Comando: {command}")
    
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    
    if result.returncode == 0:
        print(f"    ‚úÖ Sucesso!")
        if result.stdout:
            print(f"    Output: {result.stdout[:200]}")
        return True
    else:
        print(f"    ‚ùå Erro!")
        if result.stderr:
            print(f"    Erro: {result.stderr[:200]}")
        return False

def check_env_file():
    """Verifica se o arquivo .env existe e est√° configurado"""
    print_step(1, "Verificando arquivo .env")
    
    env_path = os.path.join(os.path.dirname(__file__), '.env')
    
    if not os.path.exists(env_path):
        print("‚ùå Arquivo .env n√£o encontrado!")
        print("\nVoc√™ precisa criar um arquivo .env com as credenciais do Supabase.")
        print("Consulte o arquivo CONFIGURAR_SUPABASE.md para instru√ß√µes.")
        return False
    
    # Verificar se DATABASE_URL est√° configurado
    with open(env_path, 'r', encoding='utf-8') as f:
        content = f.read()
        
        if 'DATABASE_URL=' in content:
            # Verificar se n√£o √© o exemplo
            if 'SEU_PROJETO' in content or 'SUA_SENHA' in content:
                print("‚ö†Ô∏è O arquivo .env cont√©m valores de exemplo!")
                print("Voc√™ precisa substituir pelos valores reais do Supabase.")
                print("Consulte o arquivo CONFIGURAR_SUPABASE.md para instru√ß√µes.")
                return False
            else:
                print("‚úÖ Arquivo .env encontrado e configurado!")
                return True
        else:
            print("‚ö†Ô∏è DATABASE_URL n√£o encontrado no .env!")
            print("Voc√™ precisa adicionar a connection string do Supabase.")
            print("Consulte o arquivo CONFIGURAR_SUPABASE.md para instru√ß√µes.")
            return False

def backup_sqlite():
    """Faz backup dos dados do SQLite"""
    print_step(2, "Fazendo backup dos dados do SQLite")
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_file = f"backup_sqlite_{timestamp}.json"
    
    command = f"python manage.py dumpdata --exclude auth.permission --exclude contenttypes --indent 2 > {backup_file}"
    
    if run_command(command, "Exportar dados do SQLite"):
        print(f"\n‚úÖ Backup criado: {backup_file}")
        return backup_file
    else:
        print("\n‚ùå Erro ao criar backup!")
        return None

def test_postgres_connection():
    """Testa conex√£o com o PostgreSQL"""
    print_step(3, "Testando conex√£o com o Supabase (PostgreSQL)")
    
    command = "python manage.py check --database default"
    
    if run_command(command, "Verificar configura√ß√£o do banco"):
        print("\n‚úÖ Conex√£o com Supabase configurada corretamente!")
        return True
    else:
        print("\n‚ùå Erro na conex√£o com Supabase!")
        print("\nVerifique:")
        print("1. Se o arquivo .env est√° configurado corretamente")
        print("2. Se a connection string est√° correta")
        print("3. Se sua conex√£o com a internet est√° funcionando")
        return False

def migrate_to_postgres():
    """Aplica migra√ß√µes no PostgreSQL"""
    print_step(4, "Aplicando migra√ß√µes no PostgreSQL")
    
    command = "python manage.py migrate"
    
    if run_command(command, "Aplicar migra√ß√µes"):
        print("\n‚úÖ Migra√ß√µes aplicadas com sucesso!")
        return True
    else:
        print("\n‚ùå Erro ao aplicar migra√ß√µes!")
        return False

def load_data(backup_file):
    """Carrega dados no PostgreSQL"""
    print_step(5, "Carregando dados no PostgreSQL")
    
    if not backup_file:
        print("‚ö†Ô∏è Nenhum arquivo de backup fornecido. Pulando...")
        return True
    
    command = f"python manage.py loaddata {backup_file}"
    
    if run_command(command, "Importar dados"):
        print("\n‚úÖ Dados carregados com sucesso!")
        return True
    else:
        print("\n‚ùå Erro ao carregar dados!")
        print("\n‚ö†Ô∏è N√£o se preocupe! Seus dados est√£o seguros no backup.")
        print(f"    Arquivo de backup: {backup_file}")
        return False

def verify_data():
    """Verifica se os dados foram migrados corretamente"""
    print_step(6, "Verificando migra√ß√£o")
    
    # Criar script de verifica√ß√£o
    verification_script = """
import os
import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'meu_projeto.settings')
django.setup()

from django.contrib.auth.models import User
from payments.models import Assinatura, Pagamento, PlanoPremium

print(f'Usuarios: {User.objects.count()}')
print(f'Assinaturas: {Assinatura.objects.count()}')
print(f'Pagamentos: {Pagamento.objects.count()}')
print(f'Planos: {PlanoPremium.objects.count()}')
"""
    
    with open('verify_migration.py', 'w', encoding='utf-8') as f:
        f.write(verification_script)
    
    command = "python verify_migration.py"
    
    if run_command(command, "Contar registros"):
        # Limpar script tempor√°rio
        os.remove('verify_migration.py')
        print("\n‚úÖ Dados verificados!")
        return True
    else:
        print("\n‚ö†Ô∏è N√£o foi poss√≠vel verificar os dados.")
        return False

def main():
    """Fun√ß√£o principal"""
    print_header("MIGRA√á√ÉO PARA SUPABASE (PostgreSQL)")
    
    print("Este script vai migrar seus dados do SQLite para o Supabase.")
    print("Certifique-se de ter configurado o arquivo .env antes de continuar.")
    print("\nConsulte: CONFIGURAR_SUPABASE.md para instru√ß√µes detalhadas.")
    
    input("\n>>> Pressione ENTER para continuar ou CTRL+C para cancelar...")
    
    # Passo 1: Verificar .env
    if not check_env_file():
        print("\n‚ùå Configure o arquivo .env e execute novamente.")
        return False
    
    # Passo 2: Backup do SQLite
    backup_file = backup_sqlite()
    if not backup_file:
        print("\n‚ùå N√£o foi poss√≠vel fazer backup. Abortando migra√ß√£o.")
        return False
    
    # Passo 3: Testar conex√£o
    if not test_postgres_connection():
        print("\n‚ùå N√£o foi poss√≠vel conectar ao Supabase. Abortando migra√ß√£o.")
        print(f"\n‚úÖ Seus dados est√£o seguros no backup: {backup_file}")
        return False
    
    # Passo 4: Aplicar migra√ß√µes
    if not migrate_to_postgres():
        print("\n‚ùå Erro ao aplicar migra√ß√µes. Abortando.")
        print(f"\n‚úÖ Seus dados est√£o seguros no backup: {backup_file}")
        return False
    
    # Passo 5: Carregar dados
    if not load_data(backup_file):
        print("\n‚ö†Ô∏è Erro ao carregar dados, mas o banco est√° configurado.")
        print(f"    Voc√™ pode tentar carregar manualmente: python manage.py loaddata {backup_file}")
        return False
    
    # Passo 6: Verificar
    verify_data()
    
    # Sucesso!
    print_header("MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!")
    print("‚úÖ Seus dados foram migrados para o Supabase!")
    print(f"‚úÖ Backup do SQLite: {backup_file}")
    print("\nPr√≥ximos passos:")
    print("1. Teste o site: python manage.py runserver")
    print("2. Acesse http://localhost:8000 e verifique se tudo est√° funcionando")
    print("3. Fa√ßa login e teste as funcionalidades")
    print("4. Se tudo estiver OK, voc√™ pode fazer deploy!")
    print("\nüéâ Parab√©ns! Agora seu sistema suporta:")
    print("   - 100.000+ usu√°rios")
    print("   - 10.000+ assinaturas ativas")
    print("   - 1.000+ usu√°rios simult√¢neos")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ùå Migra√ß√£o cancelada pelo usu√°rio.")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå Erro inesperado: {e}")
        sys.exit(1)
