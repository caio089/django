from django.core.management.base import BaseCommand
from payments.models import ConfiguracaoPagamento
import mercadopago
import json

class Command(BaseCommand):
    help = 'Ajuda a configurar PIX com chave de email no Mercado Pago'

    def add_arguments(self, parser):
        parser.add_argument('--email', type=str, help='Email para usar como chave PIX')

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üîß Configurando PIX com chave de email...'))
        
        # Verificar configura√ß√£o
        config = ConfiguracaoPagamento.objects.filter(ativo=True).first()
        if not config:
            self.stdout.write(self.style.ERROR('‚ùå Nenhuma configura√ß√£o ativa do Mercado Pago encontrada'))
            return
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Configura√ß√£o: {config.ambiente}'))
        
        # Email para PIX
        email_pix = options.get('email')
        if not email_pix:
            email_pix = 'seu-email@exemplo.com'
            self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è Usando email padr√£o: {email_pix}'))
            self.stdout.write('üí° Use --email seu-email@exemplo.com para definir seu email')
        else:
            self.stdout.write(self.style.SUCCESS(f'‚úÖ Email PIX: {email_pix}'))
        
        try:
            sdk = mercadopago.SDK(config.get_access_token())
            
            # Criar prefer√™ncia com configura√ß√£o espec√≠fica para PIX
            preference_data = {
                "items": [
                    {
                        "title": "Teste PIX Email",
                        "description": "Teste de PIX com chave de email",
                        "quantity": 1,
                        "unit_price": 1.0,
                        "currency_id": "BRL"
                    }
                ],
                "payer": {
                    "email": email_pix,
                    "identification": {
                        "type": "CPF",
                        "number": "11144477735"
                    }
                },
                "payment_methods": {
                    "excluded_payment_methods": [],
                    "excluded_payment_types": [],
                    "installments": 12,
                    "default_payment_method_id": "pix"
                },
                "purpose": "wallet_purchase",
                "binary_mode": False
            }
            
            self.stdout.write(self.style.WARNING('üîÑ Criando prefer√™ncia com PIX...'))
            self.stdout.write(f'Dados: {json.dumps(preference_data, indent=2)}')
            
            result = sdk.preference().create(preference_data)
            
            if result["status"] == 201:
                preference = result["response"]
                preference_id = preference["id"]
                init_point = preference.get("init_point")
                
                self.stdout.write(self.style.SUCCESS('‚úÖ Prefer√™ncia criada com sucesso!'))
                self.stdout.write(f'   ID: {preference_id}')
                self.stdout.write(f'   Email PIX: {email_pix}')
                
                # Analisar m√©todos de pagamento
                payment_methods = preference.get("payment_methods", {})
                excluded_types = payment_methods.get("excluded_payment_types", [])
                default_method = payment_methods.get("default_payment_method_id")
                
                self.stdout.write(self.style.SUCCESS('üìã An√°lise dos m√©todos:'))
                self.stdout.write(f'   M√©todo padr√£o: {default_method}')
                self.stdout.write(f'   Tipos exclu√≠dos: {excluded_types}')
                
                # Verificar PIX
                pix_available = "pix" not in [method.get("id") for method in excluded_types]
                self.stdout.write(f'   PIX dispon√≠vel: {"‚úÖ SIM" if pix_available else "‚ùå N√ÉO"}')
                
                if init_point:
                    self.stdout.write(self.style.SUCCESS('üîó URL do checkout:'))
                    self.stdout.write(f'   {init_point}')
                    self.stdout.write('üì± Acesse esta URL para testar PIX')
                
                # Orienta√ß√µes espec√≠ficas para PIX
                self.stdout.write(self.style.WARNING('üìö Para PIX aparecer no checkout:'))
                self.stdout.write('1. Acesse o painel do Mercado Pago: https://www.mercadopago.com.br/developers/panel')
                self.stdout.write('2. V√° em Configura√ß√µes > Meios de pagamento')
                self.stdout.write('3. Habilite PIX se n√£o estiver habilitado')
                self.stdout.write('4. Configure uma chave PIX de email:')
                self.stdout.write(f'   - Email: {email_pix}')
                self.stdout.write('   - V√° em PIX > Minhas chaves')
                self.stdout.write('   - Adicione uma chave de email')
                self.stdout.write('5. Verifique se a conta est√° verificada')
                self.stdout.write('6. No sandbox, PIX pode ter limita√ß√µes')
                
                # Verificar se √© sandbox
                if config.ambiente == 'sandbox':
                    self.stdout.write(self.style.WARNING('‚ö†Ô∏è AMBIENTE SANDBOX:'))
                    self.stdout.write('   - PIX pode n√£o aparecer no checkout')
                    self.stdout.write('   - Use cart√£o de cr√©dito para testes')
                    self.stdout.write('   - Para PIX real, migre para produ√ß√£o')
                
            else:
                self.stdout.write(self.style.ERROR(f'‚ùå Erro ao criar prefer√™ncia: {result}'))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erro: {str(e)}'))
            import traceback
            self.stdout.write(traceback.format_exc())
        
        # Orienta√ß√µes adicionais
        self.stdout.write(self.style.SUCCESS('üéØ Pr√≥ximos passos:'))
        self.stdout.write('1. Configure a chave PIX de email no Mercado Pago')
        self.stdout.write('2. Teste a URL do checkout fornecida')
        self.stdout.write('3. Se PIX n√£o aparecer, verifique as configura√ß√µes da conta')
        self.stdout.write('4. Considere migrar para ambiente de produ√ß√£o')
        
        self.stdout.write(self.style.SUCCESS('üèÅ Configura√ß√£o conclu√≠da!'))
