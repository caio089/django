from django.core.management.base import BaseCommand
from payments.models import ConfiguracaoPagamento
from payments.views import get_mercadopago_config

class Command(BaseCommand):
    help = 'Testa as credenciais de produ√ß√£o do Mercado Pago'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üß™ Testando credenciais de produ√ß√£o...'))
        
        # Obter configura√ß√£o
        config = ConfiguracaoPagamento.objects.first()
        if not config:
            self.stdout.write(self.style.ERROR('‚ùå Configura√ß√£o n√£o encontrada'))
            return
        
        self.stdout.write(f'üìã Ambiente atual: {config.ambiente}')
        self.stdout.write(f'   Access Token: {config.get_access_token()[:20]}...')
        self.stdout.write(f'   Public Key: {config.get_public_key()[:20]}...')
        
        # Verificar se s√£o credenciais de produ√ß√£o
        access_token = config.get_access_token()
        public_key = config.get_public_key()
        
        if access_token.startswith('TEST-'):
            self.stdout.write(self.style.ERROR('‚ùå Voc√™ est√° usando credenciais de SANDBOX!'))
            self.stdout.write(self.style.WARNING('üí° Para usar produ√ß√£o, execute:'))
            self.stdout.write('   python manage.py configurar_producao --access-token SEU_ACCESS_TOKEN --public-key SUA_PUBLIC_KEY')
            return
        elif access_token.startswith('APP-'):
            self.stdout.write(self.style.SUCCESS('‚úÖ Credenciais de produ√ß√£o detectadas!'))
        else:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è Formato de credenciais n√£o reconhecido'))
        
        # Testar SDK
        try:
            sdk, config_obj = get_mercadopago_config()
            if sdk:
                self.stdout.write(self.style.SUCCESS('‚úÖ SDK do Mercado Pago inicializado'))
                
                # Testar cria√ß√£o de prefer√™ncia
                self.stdout.write('üîÑ Testando cria√ß√£o de prefer√™ncia...')
                
                preference_data = {
                    "items": [
                        {
                            "title": "Teste Produ√ß√£o",
                            "description": "Teste de PIX em produ√ß√£o",
                            "quantity": 1,
                            "unit_price": 1.0,
                            "currency_id": "BRL"
                        }
                    ],
                    "payment_methods": {
                        "excluded_payment_methods": [],
                        "excluded_payment_types": [],
                        "installments": 12,
                        "default_payment_method_id": "pix"
                    },
                    "purpose": "wallet_purchase",
                    "binary_mode": False
                }
                
                result = sdk.preference().create(preference_data)
                
                if result["status"] == 201:
                    self.stdout.write(self.style.SUCCESS('‚úÖ Prefer√™ncia criada com sucesso!'))
                    preference = result["response"]
                    
                    self.stdout.write(f'   ID: {preference["id"]}')
                    self.stdout.write(f'   Init Point: {preference.get("init_point", "N/A")}')
                    
                    # Verificar se PIX est√° dispon√≠vel
                    payment_methods = preference.get("payment_methods", {})
                    excluded_types = payment_methods.get("excluded_payment_types", [])
                    pix_available = "pix" not in excluded_types
                    
                    if pix_available:
                        self.stdout.write(self.style.SUCCESS('‚úÖ PIX est√° dispon√≠vel!'))
                    else:
                        self.stdout.write(self.style.ERROR('‚ùå PIX n√£o est√° dispon√≠vel'))
                        
                else:
                    self.stdout.write(self.style.ERROR(f'‚ùå Erro ao criar prefer√™ncia: {result["status"]}'))
                    if "response" in result:
                        self.stdout.write(f'   Detalhes: {result["response"]}')
            else:
                self.stdout.write(self.style.ERROR('‚ùå Erro ao inicializar SDK'))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erro durante o teste: {e}'))
            import traceback
            self.stdout.write(traceback.format_exc())
        
        self.stdout.write(self.style.SUCCESS('üèÅ Teste de produ√ß√£o conclu√≠do!'))

