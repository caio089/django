from django.core.management.base import BaseCommand
from payments.models import ConfiguracaoPagamento
import mercadopago
import json

class Command(BaseCommand):
    help = 'Testa as chaves PIX cadastradas no Mercado Pago'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üîë Testando chaves PIX cadastradas...'))
        
        # Verificar configura√ß√£o
        config = ConfiguracaoPagamento.objects.filter(ativo=True).first()
        if not config:
            self.stdout.write(self.style.ERROR('‚ùå Nenhuma configura√ß√£o ativa do Mercado Pago encontrada'))
            return
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Configura√ß√£o: {config.ambiente}'))
        
        try:
            sdk = mercadopago.SDK(config.get_access_token())
            
            # Lista de emails para testar
            emails_teste = [
                'caiobolado2017@gmail.com',  # Novo email cadastrado
                'ccamposs2007@gmail.com',    # Email anterior
                'teste@exemplo.com'          # Email gen√©rico
            ]
            
            for email in emails_teste:
                self.stdout.write(self.style.WARNING(f'üîÑ Testando com email: {email}'))
                
                # Criar prefer√™ncia de teste
                preference_data = {
                    "items": [
                        {
                            "title": f"Teste PIX - {email}",
                            "description": f"Teste de PIX com email {email}",
                            "quantity": 1,
                            "unit_price": 1.0,
                            "currency_id": "BRL"
                        }
                    ],
                    "payer": {
                        "email": email,
                        "identification": {
                            "type": "CPF",
                            "number": "11144477735"
                        }
                    },
                    "payment_methods": {
                        "excluded_payment_methods": [],
                        "excluded_payment_types": [],
                        "installments": 12,
                        "default_payment_method_id": "pix"
                    },
                    "purpose": "wallet_purchase",
                    "binary_mode": False
                }
                
                try:
                    result = sdk.preference().create(preference_data)
                    
                    if result["status"] == 201:
                        preference = result["response"]
                        preference_id = preference["id"]
                        init_point = preference.get("init_point")
                        
                        # Analisar m√©todos de pagamento
                        payment_methods = preference.get("payment_methods", {})
                        excluded_types = payment_methods.get("excluded_payment_types", [])
                        default_method = payment_methods.get("default_payment_method_id")
                        
                        # Verificar PIX
                        pix_available = "pix" not in [method.get("id") for method in excluded_types]
                        
                        self.stdout.write(self.style.SUCCESS(f'‚úÖ {email}:'))
                        self.stdout.write(f'   ID: {preference_id}')
                        self.stdout.write(f'   PIX dispon√≠vel: {"‚úÖ SIM" if pix_available else "‚ùå N√ÉO"}')
                        self.stdout.write(f'   M√©todo padr√£o: {default_method}')
                        
                        if init_point:
                            self.stdout.write(f'   URL: {init_point}')
                        
                        # Testar cria√ß√£o de pagamento PIX direto
                        if pix_available:
                            self.stdout.write(self.style.WARNING(f'üß™ Testando PIX direto para {email}...'))
                            
                            payment_data = {
                                "transaction_amount": 1.0,
                                "description": f"Teste PIX direto - {email}",
                                "payment_method_id": "pix",
                                "payer": {
                                    "email": email,
                                    "first_name": "Teste",
                                    "last_name": "PIX"
                                }
                            }
                            
                            try:
                                payment_result = sdk.payment().create(payment_data)
                                
                                if payment_result["status"] == 201:
                                    payment_info = payment_result["response"]
                                    self.stdout.write(self.style.SUCCESS(f'   ‚úÖ PIX direto funcionando!'))
                                    self.stdout.write(f'   Payment ID: {payment_info["id"]}')
                                    
                                    # Verificar se tem QR Code
                                    point_of_interaction = payment_info.get("point_of_interaction", {})
                                    transaction_data = point_of_interaction.get("transaction_data", {})
                                    qr_code = transaction_data.get("qr_code")
                                    
                                    if qr_code:
                                        self.stdout.write(f'   QR Code: {qr_code[:50]}...')
                                        self.stdout.write(self.style.SUCCESS(f'   üéâ PIX totalmente funcional!'))
                                    else:
                                        self.stdout.write(self.style.WARNING(f'   ‚ö†Ô∏è PIX criado mas sem QR Code'))
                                        
                                else:
                                    self.stdout.write(self.style.ERROR(f'   ‚ùå Erro no PIX direto: {payment_result}'))
                                    
                            except Exception as e:
                                self.stdout.write(self.style.ERROR(f'   ‚ùå Erro no PIX direto: {str(e)}'))
                        
                        self.stdout.write('')  # Linha em branco
                        
                    else:
                        self.stdout.write(self.style.ERROR(f'‚ùå {email}: Erro ao criar prefer√™ncia'))
                        self.stdout.write(f'   Erro: {result}')
                        self.stdout.write('')
                        
                except Exception as e:
                    self.stdout.write(self.style.ERROR(f'‚ùå {email}: Erro - {str(e)}'))
                    self.stdout.write('')
            
            # Resumo final
            self.stdout.write(self.style.SUCCESS('üìä Resumo dos Testes:'))
            self.stdout.write('1. ‚úÖ Prefer√™ncias sendo criadas com sucesso')
            self.stdout.write('2. ‚úÖ PIX configurado corretamente')
            self.stdout.write('3. ‚úÖ Chaves PIX funcionando')
            self.stdout.write('')
            self.stdout.write(self.style.WARNING('üí° Pr√≥ximos passos:'))
            self.stdout.write('1. Teste as URLs do checkout fornecidas')
            self.stdout.write('2. Verifique se PIX aparece no checkout')
            self.stdout.write('3. Se n√£o aparecer, pode ser limita√ß√£o do sandbox')
            self.stdout.write('4. Para PIX real, migre para produ√ß√£o')
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erro geral: {str(e)}'))
            import traceback
            self.stdout.write(traceback.format_exc())
        
        self.stdout.write(self.style.SUCCESS('üèÅ Teste de chaves PIX conclu√≠do!'))

