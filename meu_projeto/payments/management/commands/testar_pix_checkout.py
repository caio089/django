from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from payments.models import PlanoPremium, ConfiguracaoPagamento
from payments.views import criar_pagamento
from django.test import RequestFactory
import json
import mercadopago

class Command(BaseCommand):
    help = 'Testa especificamente se PIX aparece no checkout do Mercado Pago'

    def add_arguments(self, parser):
        parser.add_argument('--plano-id', type=int, help='ID do plano para testar')
        parser.add_argument('--usuario-id', type=int, help='ID do usu√°rio para testar')

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üß™ Testando configura√ß√£o PIX no checkout...'))
        
        # Verificar configura√ß√£o do Mercado Pago
        config = ConfiguracaoPagamento.objects.filter(ativo=True).first()
        if not config:
            self.stdout.write(self.style.ERROR('‚ùå Nenhuma configura√ß√£o ativa do Mercado Pago encontrada'))
            return
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Configura√ß√£o: {config.ambiente}'))
        
        # Buscar plano
        plano_id = options.get('plano_id')
        if not plano_id:
            plano = PlanoPremium.objects.filter(ativo=True).first()
        else:
            try:
                plano = PlanoPremium.objects.get(id=plano_id, ativo=True)
            except PlanoPremium.DoesNotExist:
                self.stdout.write(self.style.ERROR(f'‚ùå Plano {plano_id} n√£o encontrado'))
                return
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Plano: {plano.nome} - R$ {plano.preco}'))
        
        # Buscar usu√°rio
        usuario_id = options.get('usuario_id')
        if not usuario_id:
            usuario = User.objects.filter(is_active=True).first()
        else:
            try:
                usuario = User.objects.get(id=usuario_id, is_active=True)
            except User.DoesNotExist:
                self.stdout.write(self.style.ERROR(f'‚ùå Usu√°rio {usuario_id} n√£o encontrado'))
                return
        
        self.stdout.write(self.style.SUCCESS(f'‚úÖ Usu√°rio: {usuario.username}'))
        
        # Testar cria√ß√£o de prefer√™ncia diretamente
        try:
            sdk = mercadopago.SDK(config.get_access_token())
            
            # Dados da prefer√™ncia com PIX habilitado
            preference_data = {
                "items": [
                    {
                        "title": plano.nome,
                        "description": plano.descricao,
                        "quantity": 1,
                        "unit_price": float(plano.preco),
                        "currency_id": "BRL"
                    }
                ],
                "payer": {
                    "email": "teste@exemplo.com",
                    "identification": {
                        "type": "CPF",
                        "number": "11144477735"
                    }
                },
                "payment_methods": {
                    "excluded_payment_methods": [],
                    "excluded_payment_types": [],
                    "installments": 12,
                    "default_payment_method_id": "pix"
                },
                "purpose": "wallet_purchase",
                "binary_mode": False
            }
            
            self.stdout.write(self.style.WARNING('üîÑ Criando prefer√™ncia de teste...'))
            self.stdout.write(f'Dados da prefer√™ncia: {json.dumps(preference_data, indent=2)}')
            
            # Criar prefer√™ncia
            preference_result = sdk.preference().create(preference_data)
            
            if preference_result["status"] == 201:
                preference = preference_result["response"]
                preference_id = preference["id"]
                init_point = preference.get("init_point")
                
                self.stdout.write(self.style.SUCCESS('‚úÖ Prefer√™ncia criada com sucesso!'))
                self.stdout.write(f'   ID: {preference_id}')
                self.stdout.write(f'   Init Point: {init_point}')
                
                # Analisar m√©todos de pagamento dispon√≠veis
                payment_methods = preference.get("payment_methods", {})
                excluded_methods = payment_methods.get("excluded_payment_methods", [])
                excluded_types = payment_methods.get("excluded_payment_types", [])
                default_method = payment_methods.get("default_payment_method_id")
                
                self.stdout.write(self.style.SUCCESS('üìã An√°lise dos m√©todos de pagamento:'))
                self.stdout.write(f'   M√©todos exclu√≠dos: {excluded_methods}')
                self.stdout.write(f'   Tipos exclu√≠dos: {excluded_types}')
                self.stdout.write(f'   M√©todo padr√£o: {default_method}')
                
                # Verificar se PIX est√° dispon√≠vel
                pix_available = "pix" not in [method.get("id") for method in excluded_types]
                self.stdout.write(f'   PIX dispon√≠vel: {"‚úÖ SIM" if pix_available else "‚ùå N√ÉO"}')
                
                if pix_available:
                    self.stdout.write(self.style.SUCCESS('üéâ PIX est√° habilitado na prefer√™ncia!'))
                    self.stdout.write(f'üîó Acesse o checkout: {init_point}')
                    self.stdout.write('üì± No checkout, procure pela op√ß√£o PIX')
                else:
                    self.stdout.write(self.style.ERROR('‚ùå PIX n√£o est√° dispon√≠vel na prefer√™ncia'))
                    self.stdout.write('üí° Poss√≠veis causas:')
                    self.stdout.write('   - Conta do Mercado Pago n√£o tem PIX habilitado')
                    self.stdout.write('   - Configura√ß√£o da conta incompleta')
                    self.stdout.write('   - Ambiente sandbox pode ter limita√ß√µes')
                
                # Mostrar informa√ß√µes da conta
                self.stdout.write(self.style.WARNING('üîç Informa√ß√µes da conta:'))
                self.stdout.write(f'   Collector ID: {preference.get("collector_id")}')
                self.stdout.write(f'   Site ID: {preference.get("site_id")}')
                self.stdout.write(f'   Ambiente: {config.ambiente}')
                
            else:
                self.stdout.write(self.style.ERROR(f'‚ùå Erro ao criar prefer√™ncia: {preference_result}'))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erro durante o teste: {str(e)}'))
            import traceback
            self.stdout.write(traceback.format_exc())
        
        self.stdout.write(self.style.SUCCESS('üèÅ Teste conclu√≠do!'))


