"""
Comando para debug do status de pagamento
Verifica se os dados est칚o sendo persistidos corretamente
"""
from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from payments.models import Assinatura, Pagamento, PlanoPremium
from home.models import Profile
from django.utils import timezone
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = 'Debug do status de pagamento e assinaturas'

    def add_arguments(self, parser):
        parser.add_argument('--user-id', type=int, help='ID do usu치rio para verificar')
        parser.add_argument('--all', action='store_true', help='Verificar todos os usu치rios')

    def handle(self, *args, **options):
        self.stdout.write('游댌 Iniciando debug do status de pagamento...\n')
        
        if options['all']:
            self.debug_all_users()
        elif options['user_id']:
            self.debug_user(options['user_id'])
        else:
            self.stdout.write('Use --all para verificar todos ou --user-id ID para um usu치rio espec칤fico')

    def debug_all_users(self):
        """Debug de todos os usu치rios"""
        self.stdout.write('游늵 Verificando todos os usu치rios...\n')
        
        # Contar usu치rios
        total_users = User.objects.count()
        self.stdout.write(f'Total de usu치rios: {total_users}')
        
        # Contar assinaturas
        total_assinaturas = Assinatura.objects.count()
        self.stdout.write(f'Total de assinaturas: {total_assinaturas}')
        
        # Contar pagamentos
        total_pagamentos = Pagamento.objects.count()
        self.stdout.write(f'Total de pagamentos: {total_pagamentos}')
        
        # Assinaturas ativas
        assinaturas_ativas = Assinatura.objects.filter(
            status='ativa',
            data_vencimento__gt=timezone.now()
        ).count()
        self.stdout.write(f'Assinaturas ativas: {assinaturas_ativas}')
        
        # Usu치rios com conta premium
        usuarios_premium = Profile.objects.filter(conta_premium=True).count()
        self.stdout.write(f'Usu치rios com conta premium: {usuarios_premium}')
        
        self.stdout.write('\n游늶 Detalhes das assinaturas ativas:')
        assinaturas = Assinatura.objects.filter(
            status='ativa',
            data_vencimento__gt=timezone.now()
        ).select_related('usuario', 'plano')
        
        for assinatura in assinaturas:
            self.stdout.write(f'  - {assinatura.usuario.username} ({assinatura.usuario.profile.nome})')
            self.stdout.write(f'    Plano: {assinatura.plano.nome}')
            self.stdout.write(f'    Status: {assinatura.status}')
            self.stdout.write(f'    Vencimento: {assinatura.data_vencimento}')
            self.stdout.write(f'    Profile Premium: {assinatura.usuario.profile.conta_premium}')
            self.stdout.write('')

    def debug_user(self, user_id):
        """Debug de um usu치rio espec칤fico"""
        try:
            user = User.objects.get(id=user_id)
            self.stdout.write(f'游녻 Debug do usu치rio: {user.username} ({user.profile.nome})\n')
            
            # Verificar perfil
            profile = user.profile
            self.stdout.write(f'游늶 Perfil:')
            self.stdout.write(f'  - Nome: {profile.nome}')
            self.stdout.write(f'  - Conta Premium: {profile.conta_premium}')
            self.stdout.write(f'  - Data Vencimento Premium: {profile.data_vencimento_premium}')
            
            # Verificar assinaturas
            assinaturas = Assinatura.objects.filter(usuario=user)
            self.stdout.write(f'\n游늶 Assinaturas ({assinaturas.count()}):')
            for assinatura in assinaturas:
                self.stdout.write(f'  - ID: {assinatura.id}')
                self.stdout.write(f'    Plano: {assinatura.plano.nome}')
                self.stdout.write(f'    Status: {assinatura.status}')
                self.stdout.write(f'    In칤cio: {assinatura.data_inicio}')
                self.stdout.write(f'    Vencimento: {assinatura.data_vencimento}')
                self.stdout.write(f'    Ativa: {assinatura.ativo}')
                self.stdout.write(f'    External Reference: {assinatura.external_reference}')
            
            # Verificar pagamentos
            pagamentos = Pagamento.objects.filter(usuario=user)
            self.stdout.write(f'\n游눱 Pagamentos ({pagamentos.count()}):')
            for pagamento in pagamentos:
                self.stdout.write(f'  - ID: {pagamento.id}')
                self.stdout.write(f'    Valor: R$ {pagamento.valor}')
                self.stdout.write(f'    Status: {pagamento.status}')
                self.stdout.write(f'    Data: {pagamento.data_pagamento}')
                self.stdout.write(f'    Payment ID: {pagamento.get_payment_id()}')
                self.stdout.write(f'    External Reference: {pagamento.external_reference}')
            
            # Verificar acesso premium
            from payments.views import verificar_acesso_premium
            tem_acesso, assinatura = verificar_acesso_premium(user)
            self.stdout.write(f'\n游댏 Verifica칞칚o de acesso premium:')
            self.stdout.write(f'  - Tem acesso: {tem_acesso}')
            self.stdout.write(f'  - Assinatura: {assinatura.id if assinatura else "Nenhuma"}')
            
        except User.DoesNotExist:
            self.stdout.write(self.style.ERROR(f'Usu치rio com ID {user_id} n칚o encontrado'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'Erro ao verificar usu치rio: {e}'))
