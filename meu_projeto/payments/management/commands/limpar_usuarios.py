from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from home.models import Profile
from payments.models import Pagamento, Assinatura
from django.db import transaction
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = 'Remove todos os usu√°rios cadastrados do banco de dados'

    def add_arguments(self, parser):
        parser.add_argument('--confirmar', action='store_true', help='Confirma a remo√ß√£o de todos os usu√°rios')
        parser.add_argument('--manter-admin', action='store_true', help='Mant√©m apenas o usu√°rio admin')

    def handle(self, *args, **options):
        self.stdout.write(self.style.WARNING('‚ö†Ô∏è  ATEN√á√ÉO: REMO√á√ÉO DE USU√ÅRIOS'))
        self.stdout.write('=' * 60)
        
        if not options['confirmar']:
            self.stdout.write('‚ùå ERRO: Esta opera√ß√£o √© irrevers√≠vel!')
            self.stdout.write('üí° Use --confirmar para executar a remo√ß√£o')
            self.stdout.write('üí° Use --manter-admin para manter apenas o admin')
            return
        
        # Contar usu√°rios antes da remo√ß√£o
        total_usuarios = User.objects.count()
        total_perfis = Profile.objects.count()
        total_pagamentos = Pagamento.objects.count()
        total_assinaturas = Assinatura.objects.count()
        
        self.stdout.write(f'\nüìä DADOS ATUAIS:')
        self.stdout.write(f'   Usu√°rios: {total_usuarios}')
        self.stdout.write(f'   Perfis: {total_perfis}')
        self.stdout.write(f'   Pagamentos: {total_pagamentos}')
        self.stdout.write(f'   Assinaturas: {total_assinaturas}')
        
        if total_usuarios == 0:
            self.stdout.write('\n‚úÖ Nenhum usu√°rio encontrado no banco de dados')
            return
        
        # Confirmar remo√ß√£o
        self.stdout.write(f'\n‚ö†Ô∏è  CONFIRMA√á√ÉO:')
        self.stdout.write(f'   Voc√™ est√° prestes a remover {total_usuarios} usu√°rios!')
        self.stdout.write(f'   Esta opera√ß√£o √© IRREVERS√çVEL!')
        
        if options['manter_admin']:
            self.stdout.write(f'   ‚ö†Ô∏è  Manter√° apenas usu√°rios admin/superuser')
        
        # Executar remo√ß√£o
        try:
            with transaction.atomic():
                if options['manter_admin']:
                    # Manter apenas superusers
                    usuarios_para_remover = User.objects.filter(is_superuser=False)
                    usuarios_mantidos = User.objects.filter(is_superuser=True)
                    
                    self.stdout.write(f'\nüîß REMOVENDO USU√ÅRIOS N√ÉO-ADMIN:')
                    self.stdout.write(f'   Usu√°rios a remover: {usuarios_para_remover.count()}')
                    self.stdout.write(f'   Usu√°rios mantidos: {usuarios_mantidos.count()}')
                    
                    # Remover perfis dos usu√°rios n√£o-admin
                    Profile.objects.filter(user__in=usuarios_para_remover).delete()
                    
                    # Remover pagamentos dos usu√°rios n√£o-admin
                    Pagamento.objects.filter(usuario__in=usuarios_para_remover).delete()
                    
                    # Remover assinaturas dos usu√°rios n√£o-admin
                    Assinatura.objects.filter(usuario__in=usuarios_para_remover).delete()
                    
                    # Remover usu√°rios n√£o-admin
                    usuarios_removidos = usuarios_para_remover.count()
                    usuarios_para_remover.delete()
                    
                else:
                    # Remover todos os usu√°rios
                    self.stdout.write(f'\nüóëÔ∏è  REMOVENDO TODOS OS USU√ÅRIOS:')
                    
                    # Remover perfis
                    Profile.objects.all().delete()
                    self.stdout.write('   ‚úÖ Perfis removidos')
                    
                    # Remover pagamentos
                    Pagamento.objects.all().delete()
                    self.stdout.write('   ‚úÖ Pagamentos removidos')
                    
                    # Remover assinaturas
                    Assinatura.objects.all().delete()
                    self.stdout.write('   ‚úÖ Assinaturas removidas')
                    
                    # Remover usu√°rios
                    usuarios_removidos = User.objects.count()
                    User.objects.all().delete()
                    self.stdout.write('   ‚úÖ Usu√°rios removidos')
                
                # Verificar resultado
                usuarios_restantes = User.objects.count()
                perfis_restantes = Profile.objects.count()
                pagamentos_restantes = Pagamento.objects.count()
                assinaturas_restantes = Assinatura.objects.count()
                
                self.stdout.write(f'\n‚úÖ REMO√á√ÉO CONCLU√çDA!')
                self.stdout.write(f'   Usu√°rios removidos: {usuarios_removidos}')
                self.stdout.write(f'   Usu√°rios restantes: {usuarios_restantes}')
                self.stdout.write(f'   Perfis restantes: {perfis_restantes}')
                self.stdout.write(f'   Pagamentos restantes: {pagamentos_restantes}')
                self.stdout.write(f'   Assinaturas restantes: {assinaturas_restantes}')
                
                if usuarios_restantes == 0:
                    self.stdout.write(f'\nüéØ BANCO LIMPO!')
                    self.stdout.write(f'   Agora voc√™ pode criar novos usu√°rios')
                elif options['manter_admin']:
                    self.stdout.write(f'\nüéØ APENAS ADMINS MANTIDOS!')
                    self.stdout.write(f'   Usu√°rios admin/superuser foram preservados')
                
        except Exception as e:
            self.stdout.write(f'\n‚ùå ERRO durante a remo√ß√£o: {e}')
            logger.error(f"Erro ao remover usu√°rios: {e}", exc_info=True)
            return
        
        self.stdout.write(f'\nüí° PR√ìXIMOS PASSOS:')
        self.stdout.write(f'   1. Crie novos usu√°rios via registro')
        self.stdout.write(f'   2. Ou use: python manage.py createsuperuser')
        self.stdout.write(f'   3. Teste o sistema com usu√°rios novos')
        
        self.stdout.write('\n‚úÖ Script conclu√≠do!')
