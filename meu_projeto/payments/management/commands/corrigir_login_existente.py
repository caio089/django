from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from django.contrib.auth import authenticate
from home.models import Profile
from home.forms import EmailLoginForm
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = 'Corrige login para todos os usu√°rios existentes'

    def add_arguments(self, parser):
        parser.add_argument('--senha', type=str, default='123456', help='Senha padr√£o para todos os usu√°rios')

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üîß CORRIGINDO LOGIN PARA USU√ÅRIOS EXISTENTES'))
        self.stdout.write('=' * 60)
        
        senha = options['senha']
        
        # 1. LISTAR TODOS OS USU√ÅRIOS
        users = User.objects.all()
        self.stdout.write(f'\nüë• USU√ÅRIOS EXISTENTES ({users.count()}):')
        
        for user in users:
            self.stdout.write(f'  - {user.email} (ativo: {user.is_active})')
        
        # 2. CORRIGIR CADA USU√ÅRIO
        self.stdout.write(f'\nüîß CORRIGINDO USU√ÅRIOS:')
        
        for user in users:
            self.stdout.write(f'\nüìß Processando: {user.email}')
            
            # Ativar usu√°rio se estiver inativo
            if not user.is_active:
                user.is_active = True
                self.stdout.write('   ‚úÖ Usu√°rio ativado')
            
            # Redefinir senha
            user.set_password(senha)
            user.save()
            self.stdout.write('   ‚úÖ Senha redefinida')
            
            # Verificar/criar perfil
            try:
                profile = Profile.objects.get(user=user)
                self.stdout.write('   ‚úÖ Perfil j√° existe')
            except Profile.DoesNotExist:
                profile = Profile.objects.create(
                    user=user,
                    nome=user.first_name or user.email.split('@')[0],
                    idade=25,
                    faixa='branca'
                )
                self.stdout.write('   ‚úÖ Perfil criado')
            
            # Testar login
            self.testar_login_usuario(user.email, senha)
        
        # 3. TESTE GERAL
        self.stdout.write(f'\nüß™ TESTE GERAL:')
        self.testar_todos_usuarios(senha)
        
        self.stdout.write(f'\n‚úÖ CORRE√á√ÉO CONCLU√çDA!')
        self.stdout.write(f'üéØ Todos os usu√°rios podem fazer login com senha: {senha}')
    
    def testar_login_usuario(self, email, senha):
        """Testa login de um usu√°rio espec√≠fico"""
        try:
            # Teste 1: Autentica√ß√£o direta
            user = User.objects.get(email=email)
            auth_user = authenticate(username=user.username, password=senha)
            
            if auth_user:
                self.stdout.write('   ‚úÖ Autentica√ß√£o direta: OK')
            else:
                self.stdout.write('   ‚ùå Autentica√ß√£o direta: FALHOU')
                return False
            
            # Teste 2: Formul√°rio
            form_data = {'email': email, 'senha': senha}
            form = EmailLoginForm(data=form_data)
            
            if form.is_valid():
                self.stdout.write('   ‚úÖ Formul√°rio: OK')
                return True
            else:
                self.stdout.write('   ‚ùå Formul√°rio: FALHOU')
                for field, errors in form.errors.items():
                    for error in errors:
                        self.stdout.write(f'      - {field}: {error}')
                return False
                
        except Exception as e:
            self.stdout.write(f'   ‚ùå Erro: {e}')
            return False
    
    def testar_todos_usuarios(self, senha):
        """Testa login de todos os usu√°rios"""
        users = User.objects.all()
        sucessos = 0
        falhas = 0
        
        for user in users:
            if self.testar_login_usuario(user.email, senha):
                sucessos += 1
            else:
                falhas += 1
        
        self.stdout.write(f'\nüìä RESULTADO:')
        self.stdout.write(f'   ‚úÖ Sucessos: {sucessos}')
        self.stdout.write(f'   ‚ùå Falhas: {falhas}')
        
        if falhas == 0:
            self.stdout.write('   üéâ TODOS OS USU√ÅRIOS FUNCIONAM!')
        else:
            self.stdout.write('   ‚ö†Ô∏è Alguns usu√°rios ainda t√™m problemas')
