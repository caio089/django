from django.core.management.base import BaseCommand
from django.conf import settings
from payments.models import ConfiguracaoPagamento, PlanoPremium
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = 'Verifica se o sistema est√° configurado corretamente'

    def handle(self, *args, **options):
        """
        Verifica todas as configura√ß√µes do sistema
        """
        print("üîç AN√ÅLISE COMPLETA DO SISTEMA")
        print("=" * 50)

        # 1. Verificar configura√ß√£o do Mercado Pago
        print("\n1Ô∏è‚É£ CONFIGURA√á√ÉO DO MERCADO PAGO")
        print("-" * 30)

        config = ConfiguracaoPagamento.objects.filter(ativo=True).first()
        if config:
            print(f"‚úÖ Configura√ß√£o ativa encontrada")
            print(f"   ID: {config.id}")
            print(f"   Ambiente: {config.ambiente}")
            print(f"   Webhook URL: {config.webhook_url}")
            print(f"   Access Token configurado: {'‚úÖ' if config.get_access_token() else '‚ùå'}")
            print(f"   Public Key configurado: {'‚úÖ' if config.get_public_key() else '‚ùå'}")
            print(f"   Webhook Secret configurado: {'‚úÖ' if config.get_webhook_secret() else '‚ùå'}")
            print(f"   √öltimo uso: {config.last_used}")
            print(f"   Contador de uso: {config.usage_count}")
        else:
            print("‚ùå Nenhuma configura√ß√£o ativa encontrada")

        # 2. Verificar credenciais no .env
        print("\n2Ô∏è‚É£ CREDENCIAIS NO ARQUIVO .ENV")
        print("-" * 30)

        access_token = settings.MERCADOPAGO_ACCESS_TOKEN
        public_key = settings.MERCADOPAGO_PUBLIC_KEY
        webhook_secret = settings.MERCADOPAGO_WEBHOOK_SECRET
        webhook_url = settings.MERCADOPAGO_WEBHOOK_URL

        print(f"Access Token: {'‚úÖ' if access_token else '‚ùå'} {access_token[:20] + '...' if access_token else 'N√£o configurado'}")
        print(f"Public Key: {'‚úÖ' if public_key else '‚ùå'} {public_key[:20] + '...' if public_key else 'N√£o configurado'}")
        print(f"Webhook Secret: {'‚úÖ' if webhook_secret else '‚ùå'} {webhook_secret[:20] + '...' if webhook_secret else 'N√£o configurado'}")
        print(f"Webhook URL: {'‚úÖ' if webhook_url else '‚ùå'} {webhook_url}")

        # 3. Verificar planos cadastrados
        print("\n3Ô∏è‚É£ PLANOS CADASTRADOS")
        print("-" * 30)

        planos = PlanoPremium.objects.filter(ativo=True)
        if planos.exists():
            print(f"‚úÖ {planos.count()} planos ativos encontrados:")
            for plano in planos:
                print(f"   - {plano.nome}: R$ {plano.preco} ({plano.duracao_dias} dias)")
        else:
            print("‚ùå Nenhum plano ativo encontrado")

        # 4. Verificar configura√ß√µes de email
        print("\n4Ô∏è‚É£ CONFIGURA√á√ïES DE EMAIL")
        print("-" * 30)

        email_host = settings.EMAIL_HOST
        email_port = settings.EMAIL_PORT
        email_user = settings.EMAIL_HOST_USER
        email_password = settings.EMAIL_HOST_PASSWORD

        print(f"Email Host: {'‚úÖ' if email_host else '‚ùå'} {email_host}")
        print(f"Email Port: {'‚úÖ' if email_port else '‚ùå'} {email_port}")
        print(f"Email User: {'‚úÖ' if email_user else '‚ùå'} {email_user}")
        print(f"Email Password: {'‚úÖ' if email_password else '‚ùå'} {'Configurado' if email_password else 'N√£o configurado'}")

        # 5. Verificar configura√ß√µes de banco
        print("\n5Ô∏è‚É£ CONFIGURA√á√ïES DE BANCO")
        print("-" * 30)

        db_engine = settings.DATABASES['default']['ENGINE']
        db_name = settings.DATABASES['default']['NAME']
        use_sqlite = getattr(settings, 'USE_SQLITE_FALLBACK', False)

        print(f"Engine: {db_engine}")
        print(f"Database: {db_name}")
        print(f"SQLite Fallback: {'‚úÖ' if use_sqlite else '‚ùå'} {use_sqlite}")

        # 6. Verificar configura√ß√µes de seguran√ßa
        print("\n6Ô∏è‚É£ CONFIGURA√á√ïES DE SEGURAN√áA")
        print("-" * 30)

        debug = settings.DEBUG
        secret_key = settings.SECRET_KEY
        allowed_hosts = settings.ALLOWED_HOSTS

        print(f"DEBUG: {'‚ö†Ô∏è' if debug else '‚úÖ'} {debug}")
        print(f"SECRET_KEY: {'‚úÖ' if secret_key else '‚ùå'} {'Configurado' if secret_key else 'N√£o configurado'}")
        print(f"ALLOWED_HOSTS: {'‚úÖ' if allowed_hosts else '‚ùå'} {allowed_hosts}")

        # 7. Resumo final
        print("\n7Ô∏è‚É£ RESUMO FINAL")
        print("-" * 30)

        config_ok = config and config.get_access_token() and config.get_public_key()
        planos_ok = planos.exists()
        credenciais_ok = access_token and public_key

        if config_ok and planos_ok and credenciais_ok:
            print("üéâ SISTEMA 100% CONFIGURADO E PRONTO PARA USO!")
            print("‚úÖ Mercado Pago configurado")
            print("‚úÖ Planos cadastrados")
            print("‚úÖ Credenciais v√°lidas")
            print("‚úÖ Webhook configurado")
            print("\nüöÄ O sistema est√° pronto para processar pagamentos reais!")
        else:
            print("‚ö†Ô∏è SISTEMA PARCIALMENTE CONFIGURADO")
            if not config_ok:
                print("‚ùå Configura√ß√£o do Mercado Pago incompleta")
            if not planos_ok:
                print("‚ùå Nenhum plano cadastrado")
            if not credenciais_ok:
                print("‚ùå Credenciais do Mercado Pago inv√°lidas")

        print("\n" + "=" * 50)
