from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from payments.models import ConfiguracaoPagamento
from home.models import Profile
from django.conf import settings
import os

class Command(BaseCommand):
    help = 'Corrige problemas comuns no deploy'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üîß CORRIGINDO PROBLEMAS DO DEPLOY'))
        self.stdout.write('=' * 50)
        
        # 1. Verificar e corrigir usu√°rios
        self.stdout.write('\nüë• VERIFICANDO USU√ÅRIOS:')
        
        # Verificar se o usu√°rio principal existe
        try:
            user = User.objects.get(email='ccamposs2007@gmail.com')
            if not user.is_active:
                user.is_active = True
                user.save()
                self.stdout.write('‚úÖ Usu√°rio ccamposs2007@gmail.com ativado')
            else:
                self.stdout.write('‚úÖ Usu√°rio ccamposs2007@gmail.com j√° est√° ativo')
        except User.DoesNotExist:
            self.stdout.write('‚ùå Usu√°rio ccamposs2007@gmail.com n√£o encontrado')
        
        # 2. Verificar e corrigir perfis
        self.stdout.write('\nüë§ VERIFICANDO PERFIS:')
        
        for user in User.objects.all():
            try:
                profile = Profile.objects.get(user=user)
                self.stdout.write(f'‚úÖ Perfil j√° existe para {user.email}')
            except Profile.DoesNotExist:
                # Criar perfil com valores padr√£o
                profile = Profile.objects.create(
                    user=user,
                    nome=user.first_name or user.email.split('@')[0],
                    idade=25,  # Idade padr√£o
                    faixa='branca'  # Faixa padr√£o
                )
                self.stdout.write(f'‚úÖ Perfil criado para {user.email}')
        
        # 3. Verificar configura√ß√£o do Mercado Pago
        self.stdout.write('\nüí≥ VERIFICANDO MERCADO PAGO:')
        
        # Verificar se h√° configura√ß√£o ativa
        active_config = ConfiguracaoPagamento.objects.filter(ativo=True).first()
        if not active_config:
            self.stdout.write('‚ùå Nenhuma configura√ß√£o ativa do Mercado Pago')
            
            # Tentar criar configura√ß√£o a partir das vari√°veis de ambiente
            access_token = os.getenv('MERCADOPAGO_ACCESS_TOKEN')
            public_key = os.getenv('MERCADOPAGO_PUBLIC_KEY')
            
            if access_token and public_key:
                config = ConfiguracaoPagamento.objects.create(
                    nome='Configura√ß√£o Deploy',
                    ambiente='production' if not access_token.startswith('TEST-') else 'sandbox',
                    access_token=access_token,
                    public_key=public_key,
                    ativo=True
                )
                self.stdout.write('‚úÖ Configura√ß√£o do Mercado Pago criada a partir das vari√°veis de ambiente')
            else:
                self.stdout.write('‚ùå Vari√°veis de ambiente do Mercado Pago n√£o encontradas')
        else:
            self.stdout.write('‚úÖ Configura√ß√£o do Mercado Pago ativa encontrada')
        
        # 4. Verificar configura√ß√µes do Django
        self.stdout.write('\n‚öôÔ∏è VERIFICANDO CONFIGURA√á√ïES:')
        
        if settings.DEBUG:
            self.stdout.write('‚ö†Ô∏è DEBUG est√° ativado - desative em produ√ß√£o')
        
        allowed_hosts = settings.ALLOWED_HOSTS
        if 'dojo-on.onrender.com' not in allowed_hosts:
            self.stdout.write('‚ö†Ô∏è dojo-on.onrender.com n√£o est√° em ALLOWED_HOSTS')
        else:
            self.stdout.write('‚úÖ dojo-on.onrender.com est√° em ALLOWED_HOSTS')
        
        self.stdout.write('\n‚úÖ Corre√ß√µes conclu√≠das!')
